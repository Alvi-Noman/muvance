# .github/workflows/release-images.yml
name: Release Images

on:
  push:
    branches: [ main ]
    paths:
      - "services/**"
      - "packages/**"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "turbo.json"
      - ".github/workflows/release-images.yml"
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_build_push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      # Optional PAT. If empty, we fall back to GITHUB_TOKEN.
      GHCR_PAT: ${{ secrets.GHCR_TOKEN }}
      # Optional explicit username for PAT mode. If empty, we default to 'alvi-noman'.
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      # Render deploy hooks (optional)
      RENDER_HOOK_API_GATEWAY: ${{ secrets.RENDER_DEPLOY_HOOK_API_GATEWAY }}
      RENDER_HOOK_AUTH:        ${{ secrets.RENDER_DEPLOY_HOOK_AUTH }}
      RENDER_HOOK_UPLOAD:      ${{ secrets.RENDER_DEPLOY_HOOK_UPLOAD }}

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: api-gateway
            file: services/api-gateway/Dockerfile
            context: .
            image_suffix: qravy-api-gateway
          - name: auth
            file: services/auth-service/Dockerfile
            context: .
            image_suffix: qravy-auth
          - name: upload
            file: services/upload-service/Dockerfile
            context: .
            image_suffix: qravy-upload

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Vars
        id: vars
        run: |
          echo "STAMP=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "SHA_FULL=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Compute lowercase owner
        id: ow
        run: |
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Docker logout GHCR (cleanup)
        run: docker logout ghcr.io || true

      # Compute a safe username for PAT mode without expressions
      - name: Decide GHCR username for PAT
        if: ${{ env.GHCR_PAT != '' }}
        run: |
          if [ -n "${GHCR_USERNAME}" ]; then
            echo "GHCR_LOGIN_USER=${GHCR_USERNAME}" >> "$GITHUB_ENV"
          else
            echo "GHCR_LOGIN_USER=alvi-noman" >> "$GITHUB_ENV"
          fi

      - name: Login to GHCR (PAT)
        if: ${{ env.GHCR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_LOGIN_USER }}
          password: ${{ env.GHCR_PAT }}

      - name: Login to GHCR (GITHUB_TOKEN)
        if: ${{ env.GHCR_PAT == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify GHCR login
        run: |
          set -e
          if [ ! -f "$HOME/.docker/config.json" ]; then
            echo "No Docker config.json found"
            exit 1
          fi
          if ! cat "$HOME/.docker/config.json" | tr -d '\n' | grep -q 'ghcr.io'; then
            echo "ERROR: Not logged into ghcr.io"
            exit 1
          fi
          echo "Logged into ghcr.io"

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.file }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ steps.ow.outputs.OWNER_LC }}/${{ matrix.service.image_suffix }}:prod
            ghcr.io/${{ steps.ow.outputs.OWNER_LC }}/${{ matrix.service.image_suffix }}:prod-${{ steps.vars.outputs.STAMP }}-${{ steps.vars.outputs.SHA_SHORT }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.vars.outputs.SHA_FULL }}
            org.opencontainers.image.title=${{ matrix.service.name }}
            org.opencontainers.image.created=${{ steps.vars.outputs.STAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Render deploy (${{ matrix.service.name }})
        shell: bash
        run: |
          HOOK=""
          case "${{ matrix.service.name }}" in
            api-gateway) HOOK="${RENDER_HOOK_API_GATEWAY}";;
            auth)        HOOK="${RENDER_HOOK_AUTH}";;
            upload)      HOOK="${RENDER_HOOK_UPLOAD}";;
          esac

          if [ -z "$HOOK" ]; then
            echo "No deploy hook configured for ${{ matrix.service.name }} â€” skipping."
            exit 0
          fi

          for i in 1 2 3; do
            if curl -fsS -X POST "$HOOK"; then
              echo "Triggered Render deploy for ${{ matrix.service.name }}"
              exit 0
            fi
            echo "Retry $i..."
            sleep 3
          done
          echo "Failed to trigger Render deploy via hook"
          exit 1
