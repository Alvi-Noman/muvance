name: Release Images

on:
  push:
    branches: [ main ]
    paths:
      - "services/**"
      - "packages/**"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "turbo.json"
      - ".github/workflows/release-images.yml"
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_build_push:
    name: Build & Push Images
    runs-on: ubuntu-latest

    # Mirror top-level permissions (useful on some runners)
    permissions:
      contents: read
      packages: write

    # Make secrets accessible via env so we can use them in `if:`
    env:
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      RENDER_DEPLOY_HOOK_API_GATEWAY: ${{ secrets.RENDER_DEPLOY_HOOK_API_GATEWAY }}
      RENDER_DEPLOY_HOOK_AUTH: ${{ secrets.RENDER_DEPLOY_HOOK_AUTH }}
      RENDER_DEPLOY_HOOK_UPLOAD: ${{ secrets.RENDER_DEPLOY_HOOK_UPLOAD }}

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: api-gateway
            file: services/api-gateway/Dockerfile
            context: .
            repo: muvance-api-gateway
          - name: auth
            file: services/auth-service/Dockerfile
            context: .
            repo: muvance-auth
          - name: upload
            file: services/upload-service/Dockerfile
            context: .
            repo: muvance-upload

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Vars
        id: vars
        run: |
          echo "STAMP=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
          echo "SHA_FULL=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          echo "OWNER_LC=$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # Prefer PAT if GHCR_TOKEN is present; otherwise use GITHUB_TOKEN
      - name: Login to GHCR with PAT
        if: ${{ env.GHCR_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Login to GHCR with GITHUB_TOKEN
        if: ${{ env.GHCR_TOKEN == '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.file }}
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ steps.vars.outputs.OWNER_LC }}/${{ matrix.service.repo }}:prod
            ghcr.io/${{ steps.vars.outputs.OWNER_LC }}/${{ matrix.service.repo }}:${{ steps.vars.outputs.STAMP }}-${{ steps.vars.outputs.SHA_SHORT }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.vars.outputs.SHA_FULL }}
            org.opencontainers.image.title=${{ matrix.service.name }}
            org.opencontainers.image.created=${{ steps.vars.outputs.STAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional Render hooks â€” only fire if set
      - name: Trigger Render deploy (api-gateway)
        if: ${{ success() && env.RENDER_DEPLOY_HOOK_API_GATEWAY != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_API_GATEWAY"

      - name: Trigger Render deploy (auth)
        if: ${{ success() && env.RENDER_DEPLOY_HOOK_AUTH != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_AUTH"

      - name: Trigger Render deploy (upload)
        if: ${{ success() && env.RENDER_DEPLOY_HOOK_UPLOAD != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK_UPLOAD"
