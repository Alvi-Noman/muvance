# .github/workflows/release-images.yml
name: Release Images

on:
  push:
    branches: [ main ]
    paths:
      - "services/**"
      - "packages/**"
      - "pnpm-lock.yaml"
      - "pnpm-workspace.yaml"
      - "turbo.json"
      - ".github/workflows/release-images.yml"
  workflow_dispatch: {}   # allow manual runs from the Actions tab

# Needed for GHCR with the default GITHUB_TOKEN
permissions:
  contents: read
  packages: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_build_push:
    name: Build & Push Images
    runs-on: ubuntu-latest

    # Redundant but harmless: ensures the job has the right perms
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: api-gateway
            file: services/api-gateway/Dockerfile
            context: .
            # ensure lowercase repo path for GHCR
            image: ghcr.io/${{ toLower(github.repository_owner) }}/muvance-api-gateway
          - name: auth
            file: services/auth-service/Dockerfile
            context: .
            image: ghcr.io/${{ toLower(github.repository_owner) }}/muvance-auth
          - name: upload
            file: services/upload-service/Dockerfile
            context: .
            image: ghcr.io/${{ toLower(github.repository_owner) }}/muvance-upload

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Vars
        id: vars
        run: |
          echo "STAMP=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "SHA_FULL=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # actor is fine for login; tags use lowercased owner above
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.file }}
          push: true
          platforms: linux/amd64
          # Build final stage (no --target); your Dockerfiles should build prod by default
          tags: |
            ${{ matrix.service.image }}:prod
            ${{ matrix.service.image }}:${{ steps.vars.outputs.STAMP }}-${{ steps.vars.outputs.SHA_SHORT }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ steps.vars.outputs.SHA_FULL }}
            org.opencontainers.image.title=${{ matrix.service.name }}
            org.opencontainers.image.created=${{ steps.vars.outputs.STAMP }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # OPTIONAL: trigger Render deploy hooks â€” use env shim so `if:` can read it safely
      - name: Trigger Render deploy (api-gateway)
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_API_GATEWAY }}
        if: ${{ success() && env.RENDER_DEPLOY_HOOK != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK"

      - name: Trigger Render deploy (auth)
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_AUTH }}
        if: ${{ success() && env.RENDER_DEPLOY_HOOK != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK"

      - name: Trigger Render deploy (upload)
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK_UPLOAD }}
        if: ${{ success() && env.RENDER_DEPLOY_HOOK != '' }}
        run: curl -fsSL -X POST "$RENDER_DEPLOY_HOOK"
